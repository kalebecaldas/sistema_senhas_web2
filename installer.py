#!/usr/bin/env python3
"""
Instalador do Sistema de Senhas IAAM
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

class SistemaInstaller:
    def __init__(self):
        self.project_name = "Sistema de Senhas IAAM"
        self.version = "1.0.0"
        self.python_version = "3.8"
        
    def print_banner(self):
        """Exibir banner do instalador"""
        print("=" * 60)
        print(f"    {self.project_name} - Vers√£o {self.version}")
        print("=" * 60)
        print()
    
    def check_python_version(self):
        """Verificar vers√£o do Python"""
        print("üîç Verificando vers√£o do Python...")
        
        if sys.version_info < (3, 8):
            print(f"‚ùå Erro: Python {self.python_version} ou superior √© necess√°rio")
            print(f"   Vers√£o atual: {sys.version}")
            return False
        
        print(f"‚úÖ Python {sys.version} - OK")
        return True
    
    def check_git(self):
        """Verificar se o Git est√° instalado"""
        print("üîç Verificando Git...")
        
        try:
            result = subprocess.run(['git', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {result.stdout.strip()} - OK")
                return True
        except FileNotFoundError:
            pass
        
        print("‚ùå Git n√£o encontrado. Instale o Git primeiro.")
        return False
    
    def create_virtual_environment(self):
        """Criar ambiente virtual"""
        print("üîß Criando ambiente virtual...")
        
        if os.path.exists('venv'):
            print("‚ö†Ô∏è  Ambiente virtual j√° existe")
            return True
        
        try:
            subprocess.run([sys.executable, '-m', 'venv', 'venv'], check=True)
            print("‚úÖ Ambiente virtual criado")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao criar ambiente virtual: {e}")
            return False
    
    def install_dependencies(self):
        """Instalar depend√™ncias"""
        print("üì¶ Instalando depend√™ncias...")
        
        # Determinar o pip correto para o ambiente virtual
        if os.name == 'nt':  # Windows
            pip_path = 'venv\\Scripts\\pip'
        else:  # Unix/Linux/macOS
            pip_path = 'venv/bin/pip'
        
        try:
            # Atualizar pip
            subprocess.run([pip_path, 'install', '--upgrade', 'pip'], check=True)
            
            # Instalar depend√™ncias
            subprocess.run([pip_path, 'install', '-r', 'requirements.txt'], check=True)
            print("‚úÖ Depend√™ncias instaladas")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
            return False
    
    def setup_database(self):
        """Configurar banco de dados"""
        print("üóÑÔ∏è  Configurando banco de dados...")
        
        try:
            # Criar diret√≥rio instance se n√£o existir
            os.makedirs('instance', exist_ok=True)
            
            # Executar script de cria√ß√£o do banco
            if os.name == 'nt':  # Windows
                python_path = 'venv\\Scripts\\python'
            else:  # Unix/Linux/macOS
                python_path = 'venv/bin/python'
            
            subprocess.run([python_path, 'recriar_banco.py'], check=True)
            print("‚úÖ Banco de dados configurado")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao configurar banco de dados: {e}")
            return False
    
    def create_startup_scripts(self):
        """Criar scripts de inicializa√ß√£o"""
        print("üöÄ Criando scripts de inicializa√ß√£o...")
        
        # Script para Windows
        if os.name == 'nt':
            with open('iniciar_sistema.bat', 'w', encoding='utf-8') as f:
                f.write('@echo off\n')
                f.write('echo Iniciando Sistema de Senhas IAAM...\n')
                f.write('call venv\\Scripts\\activate\n')
                f.write('python run.py\n')
                f.write('pause\n')
        
        # Script para Unix/Linux/macOS
        else:
            with open('iniciar_sistema.sh', 'w') as f:
                f.write('#!/bin/bash\n')
                f.write('echo "Iniciando Sistema de Senhas IAAM..."\n')
                f.write('source venv/bin/activate\n')
                f.write('python run.py\n')
            
            # Tornar execut√°vel
            os.chmod('iniciar_sistema.sh', 0o755)
        
        print("‚úÖ Scripts de inicializa√ß√£o criados")
        return True
    
    def create_directories(self):
        """Criar diret√≥rios necess√°rios"""
        print("üìÅ Criando diret√≥rios...")
        
        directories = [
            'backups',
            'logs',
            'uploads'
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
        
        print("‚úÖ Diret√≥rios criados")
        return True
    
    def create_config_file(self):
        """Criar arquivo de configura√ß√£o padr√£o"""
        print("‚öôÔ∏è  Criando configura√ß√£o padr√£o...")
        
        config_content = '''# Configura√ß√£o do Sistema de Senhas IAAM
SECRET_KEY = 'sua-chave-secreta-aqui'
DATABASE_URI = 'sqlite:///instance/sistema.db'
DEBUG = True
PORT = 5003
HOST = '0.0.0.0'

# Configura√ß√µes do Display
DISPLAY_TITLE = 'Sistema IAAM'
DISPLAY_SUBTITLE = 'Aguarde ser chamado'
DISPLAY_FONT_SIZE = '48px'
DISPLAY_BACKGROUND_COLOR = '#1a1a1a'
DISPLAY_TEXT_COLOR = '#ffffff'

# Configura√ß√µes de Som
ENABLE_SOUND = True
SOUND_FILE = 'static/audio/beep.mp3'

# Configura√ß√µes de Prioridade
PESO_NORMAL = 1
PESO_PREFERENCIAL = 3
TOLERANCIA_MINUTOS = 5
'''
        
        with open('app/config.py', 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print("‚úÖ Arquivo de configura√ß√£o criado")
        return True
    
    def run_installation(self):
        """Executar instala√ß√£o completa"""
        self.print_banner()
        
        steps = [
            ("Verificar Python", self.check_python_version),
            ("Verificar Git", self.check_git),
            ("Criar ambiente virtual", self.create_virtual_environment),
            ("Instalar depend√™ncias", self.install_dependencies),
            ("Criar diret√≥rios", self.create_directories),
            ("Configurar banco de dados", self.setup_database),
            ("Criar configura√ß√£o", self.create_config_file),
            ("Criar scripts de inicializa√ß√£o", self.create_startup_scripts)
        ]
        
        print("üöÄ Iniciando instala√ß√£o...\n")
        
        for step_name, step_func in steps:
            print(f"üìã {step_name}...")
            if not step_func():
                print(f"\n‚ùå Falha na etapa: {step_name}")
                print("Instala√ß√£o interrompida.")
                return False
            print()
        
        print("üéâ Instala√ß√£o conclu√≠da com sucesso!")
        print("\nüìù Pr√≥ximos passos:")
        print("1. Execute o script de inicializa√ß√£o:")
        if os.name == 'nt':
            print("   iniciar_sistema.bat")
        else:
            print("   ./iniciar_sistema.sh")
        print("2. Acesse http://localhost:5003")
        print("3. Fa√ßa login com as credenciais padr√£o:")
        print("   Usu√°rio: admin")
        print("   Senha: admin123")
        print("\n‚ö†Ô∏è  IMPORTANTE: Altere a senha padr√£o ap√≥s o primeiro login!")
        
        return True

def main():
    """Fun√ß√£o principal"""
    installer = SistemaInstaller()
    
    try:
        installer.run_installation()
    except KeyboardInterrupt:
        print("\n\n‚ùå Instala√ß√£o cancelada pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 